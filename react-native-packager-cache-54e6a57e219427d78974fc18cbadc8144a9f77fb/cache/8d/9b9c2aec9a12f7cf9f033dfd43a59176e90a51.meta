["7f03e908e25c3ef3f15f6fc7c70576ea796c3aff","75ece692120ee3529c4d0b12a348373a17debc6a",["./utils/invariant"],[91],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/StateUtils.js"],"names":["StateUtils","get","state","key","routes","find","route","indexOf","map","has","some","push","slice","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAt","replaceAtIndex","reset","Array","isArray","nextIndex","undefined","compare","ii","every"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport invariant from './utils/invariant';\n\nimport type { NavigationRoute, NavigationState } from './TypeDefinition';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state: NavigationState, key: string): ?NavigationRoute {\n    return state.routes.find((route: *) => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state: NavigationState, key: string): number {\n    return state.routes.map((route: *) => route.key).indexOf(key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state: NavigationState, key: string): boolean {\n    return !!state.routes.some((route: *) => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the positon to where the last route in the\n   * stack is at.\n   */\n  push(state: NavigationState, route: NavigationRoute): NavigationState {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the positon to where the last route in the\n   * stack is at.\n   */\n  pop(state: NavigationState): NavigationState {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state: NavigationState, index: number): NavigationState {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state: NavigationState, key: string): NavigationState {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state: NavigationState): NavigationState {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state: NavigationState): NavigationState {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the positon to where the new route in the\n   * stack is at.\n   */\n  replaceAt(\n    state: NavigationState,\n    key: string,\n    route: NavigationRoute\n  ): NavigationState {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.replaceAtIndex(state, index, route);\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the positon to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(\n    state: NavigationState,\n    index: number,\n    route: NavigationRoute\n  ): NavigationState {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the positon to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(\n    state: NavigationState,\n    routes: Array<NavigationRoute>,\n    index?: number\n  ): NavigationState {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex: number = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route: *, ii: *) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"]}]
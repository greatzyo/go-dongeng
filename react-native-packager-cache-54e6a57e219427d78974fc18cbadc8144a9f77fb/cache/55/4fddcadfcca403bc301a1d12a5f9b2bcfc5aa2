

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _IndicatorViewPager = require('../IndicatorViewPager');

var _IndicatorViewPager2 = babelHelpers.interopRequireDefault(_IndicatorViewPager);

var PagerTitleIndicator = function (_Component) {
    babelHelpers.inherits(PagerTitleIndicator, _Component);

    function PagerTitleIndicator() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, PagerTitleIndicator);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = PagerTitleIndicator.__proto__ || Object.getPrototypeOf(PagerTitleIndicator)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            selectedIndex: _this.props.initialPage
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(PagerTitleIndicator, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            return this.state.selectedIndex != nextState.selectedIndex || this.props.titles + '' != nextProps.titles + '' || this.props.style != nextProps.style || this.props.itemStyle != nextProps.itemStyle || this.props.itemTextStyle != nextProps.itemTextStyle || this.props.selectedItemTextStyle != nextProps.selectedItemTextStyle || this.props.selectedBorderStyle != nextProps.selectedBorderStyle;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                titles = _props.titles,
                pager = _props.pager,
                itemStyle = _props.itemStyle,
                selectedItemStyle = _props.selectedItemStyle,
                itemTextStyle = _props.itemTextStyle,
                selectedItemTextStyle = _props.selectedItemTextStyle,
                selectedBorderStyle = _props.selectedBorderStyle;

            if (!titles || titles.length === 0) return null;

            var titleViews = titles.map(function (title, index) {
                var isSelected = _this2.state.selectedIndex === index;

                var titleView = _this2.props.renderTitle ? _this2.props.renderTitle(index, title, isSelected) : _react2.default.createElement(
                    _reactNative.Text,
                    { style: isSelected ? [styles.titleTextSelected, selectedItemTextStyle] : [styles.titleText, itemTextStyle] },
                    title
                );

                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        style: [styles.titleContainer, isSelected ? selectedItemStyle : itemStyle],
                        activeOpacity: 0.6,
                        key: index,
                        onPress: function onPress() {
                            !isSelected && pager.setPage(index);
                        }
                    },
                    titleView,
                    isSelected ? _react2.default.createElement(_reactNative.View, { style: [styles.selectedBorder, selectedBorderStyle] }) : null
                );
            });
            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.indicatorContainer, this.props.style] },
                titleViews
            );
        }
    }, {
        key: 'onPageSelected',
        value: function onPageSelected(e) {
            this.setState({ selectedIndex: e.position });
        }
    }]);
    return PagerTitleIndicator;
}(_react.Component);

PagerTitleIndicator.propTypes = babelHelpers.extends({}, _reactNative.View.propTypes, {
    initialPage: _propTypes2.default.number,
    pager: _propTypes2.default.instanceOf(_IndicatorViewPager2.default),
    titles: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
    itemStyle: _reactNative.View.propTypes.style,
    selectedItemStyle: _reactNative.View.propTypes.style,
    itemTextStyle: _reactNative.Text.propTypes.style,
    selectedItemTextStyle: _reactNative.Text.propTypes.style,
    selectedBorderStyle: _reactNative.View.propTypes.style,
    renderTitle: _propTypes2.default.func
});
PagerTitleIndicator.defaultProps = {
    titles: [],
    initialPage: 0
};
exports.default = PagerTitleIndicator;


var styles = _reactNative.StyleSheet.create({
    indicatorContainer: {
        height: 40,
        flexDirection: 'row',
        backgroundColor: '#F6F6F6'
    },
    titleText: {
        color: '#333333',
        fontSize: 15
    },
    titleTextSelected: {
        color: '#FF7200',
        fontSize: 15
    },
    titleContainer: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center'
    },
    selectedBorder: {
        backgroundColor: '#FF7200',
        height: 2,
        position: 'absolute',
        bottom: 0,
        left: 0,
        right: 0
    }
});
["39666864fb8ed62c766ba1da559d0984b559077c","4c130adc94a7c672e953ab07d3c54c7c450c4dcd",["react","prop-types","react-native","./TabViewPropTypes"],[87,182,292,342],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-native-tab-view/src/TabViewPagerPan.js"],"names":["DEAD_ZONE","DefaultTransitionSpec","timing","spring","tension","friction","TabViewPagerPan","_pendingIndex","_lastValue","_isMoving","_startDirection","_isIndexInRange","index","routes","props","navigationState","length","_isMovingHorizontally","evt","gestureState","Math","abs","dx","dy","vx","vy","_isReverseDirection","_getNextIndex","currentIndex","swipeVelocityThreshold","OS","swipeDistanceThreshold","nextIndex","isRTL","_canMoveScreen","swipeEnabled","canMove","_startGesture","onSwipeStart","getLastPosition","position","stopAnimation","_respondToGesture","width","layout","currentPosition","nextPosition","setValue","_finishGesture","onSwipeEnd","currentValue","_transitionTo","toValue","lastPosition","currentTransitionProps","progress","nextTransitionProps","animationEnabled","transitionSpec","configureTransition","transitionConfig","start","finished","jumpToIndex","_panResponder","create","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderGrant","onPanResponderMove","onPanResponderTerminate","onPanResponderRelease","onPanResponderTerminationRequest","_resetListener","subscribe","prevProps","remove","children","inputRange","map","x","i","outputRange","translateX","interpolate","styles","sheet","transform","panHandlers","child","key","testID","absoluteFill","propTypes","func","isRequired","bool","number","node","defaultProps","initialLayout","height","flex","flexDirection","alignItems"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { PureComponent, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  PanResponder,\n  Platform,\n  StyleSheet,\n  View,\n  I18nManager,\n} from 'react-native';\nimport { SceneRendererPropType } from './TabViewPropTypes';\nimport type {\n  SceneRendererProps,\n  Route,\n  TransitionConfigurator,\n} from './TabViewTypeDefinitions';\n\ntype GestureEvent = {\n  nativeEvent: {\n    changedTouches: Array<*>,\n    identifier: number,\n    locationX: number,\n    locationY: number,\n    pageX: number,\n    pageY: number,\n    target: number,\n    timestamp: number,\n    touches: Array<*>,\n  },\n};\n\ntype GestureState = {\n  stateID: number,\n  moveX: number,\n  moveY: number,\n  x0: number,\n  y0: number,\n  dx: number,\n  dy: number,\n  vx: number,\n  vy: number,\n  numberActiveTouches: number,\n};\n\ntype GestureHandler = (event: GestureEvent, state: GestureState) => void;\n\ntype DefaultProps = {\n  configureTransition: TransitionConfigurator,\n  swipeDistanceThreshold: number,\n  swipeVelocityThreshold: number,\n};\n\ntype Props<T> = SceneRendererProps<T> & {\n  configureTransition: TransitionConfigurator,\n  animationEnabled?: boolean,\n  swipeEnabled?: boolean,\n  swipeDistanceThreshold: number,\n  swipeVelocityThreshold: number,\n  onSwipeStart?: GestureHandler,\n  onSwipeEnd?: GestureHandler,\n  children?: React.Element<any>,\n};\n\nconst DEAD_ZONE = 12;\n\nconst DefaultTransitionSpec = {\n  timing: Animated.spring,\n  tension: 300,\n  friction: 35,\n};\n\nexport default class TabViewPagerPan<T: Route<*>> extends PureComponent<\n  DefaultProps,\n  Props<T>,\n  void\n> {\n  static propTypes = {\n    ...SceneRendererPropType,\n    configureTransition: PropTypes.func.isRequired,\n    animationEnabled: PropTypes.bool,\n    swipeEnabled: PropTypes.bool,\n    swipeDistanceThreshold: PropTypes.number.isRequired,\n    swipeVelocityThreshold: PropTypes.number.isRequired,\n    onSwipeStart: PropTypes.func,\n    onSwipeEnd: PropTypes.func,\n    children: PropTypes.node,\n  };\n\n  static defaultProps = {\n    configureTransition: () => DefaultTransitionSpec,\n    initialLayout: {\n      height: 0,\n      width: 0,\n    },\n    swipeDistanceThreshold: 120,\n    swipeVelocityThreshold: 0.25,\n  };\n\n  componentWillMount() {\n    this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: this._canMoveScreen,\n      onMoveShouldSetPanResponderCapture: this._canMoveScreen,\n      onPanResponderGrant: this._startGesture,\n      onPanResponderMove: this._respondToGesture,\n      onPanResponderTerminate: this._finishGesture,\n      onPanResponderRelease: this._finishGesture,\n      onPanResponderTerminationRequest: () => true,\n    });\n  }\n\n  componentDidMount() {\n    this._resetListener = this.props.subscribe('reset', this._transitionTo);\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    if (prevProps.navigationState.index !== this.props.navigationState.index) {\n      this._transitionTo(this.props.navigationState.index);\n    }\n  }\n\n  componentWillUnmount() {\n    this._resetListener.remove();\n  }\n\n  _panResponder: Object;\n  _resetListener: Object;\n  _pendingIndex = null;\n  _lastValue = null;\n  _isMoving = null;\n  _startDirection = 0;\n\n  _isIndexInRange = (index: number) => {\n    const { routes } = this.props.navigationState;\n    return index >= 0 && index <= routes.length - 1;\n  };\n\n  _isMovingHorizontally = (evt: GestureEvent, gestureState: GestureState) => {\n    return (\n      Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 3) &&\n      Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 3)\n    );\n  };\n\n  _isReverseDirection = (gestureState: GestureState) => {\n    if (this._startDirection > 0) {\n      return gestureState.vx < 0;\n    } else {\n      return gestureState.vx > 0;\n    }\n  };\n\n  _getNextIndex = (evt: GestureEvent, gestureState: GestureState) => {\n    const currentIndex =\n      typeof this._pendingIndex === 'number'\n        ? this._pendingIndex\n        : this.props.navigationState.index;\n\n    let swipeVelocityThreshold = this.props.swipeVelocityThreshold;\n\n    if (Platform.OS === 'android') {\n      // on Android, velocity is way lower due to timestamp being in nanosecond\n      // normalize it to have the same velocity on both iOS and Android\n      swipeVelocityThreshold /= 1000000;\n    }\n\n    if (\n      Math.abs(gestureState.dx) > this.props.swipeDistanceThreshold ||\n      Math.abs(gestureState.vx) > swipeVelocityThreshold\n    ) {\n      const nextIndex =\n        currentIndex -\n        gestureState.dx /\n          Math.abs(gestureState.dx) *\n          (I18nManager.isRTL ? -1 : 1);\n      if (this._isIndexInRange(nextIndex)) {\n        return nextIndex;\n      }\n    }\n    return currentIndex;\n  };\n\n  _canMoveScreen = (evt: GestureEvent, gestureState: GestureState) => {\n    if (this.props.swipeEnabled === false) {\n      return false;\n    }\n    const { navigationState: { routes, index } } = this.props;\n    const canMove =\n      this._isMovingHorizontally(evt, gestureState) &&\n      ((gestureState.dx >= DEAD_ZONE && index >= 0) ||\n        (gestureState.dx <= -DEAD_ZONE && index <= routes.length - 1));\n    if (canMove) {\n      this._startDirection = gestureState.dx;\n    }\n    return canMove;\n  };\n\n  _startGesture = (evt: GestureEvent, gestureState: GestureState) => {\n    if (typeof this.props.onSwipeStart === 'function') {\n      this.props.onSwipeStart(evt, gestureState);\n    }\n    this._lastValue = this.props.getLastPosition();\n    this.props.position.stopAnimation();\n  };\n\n  _respondToGesture = (evt: GestureEvent, gestureState: GestureState) => {\n    const { layout: { width } } = this.props;\n    const currentPosition =\n      typeof this._lastValue === 'number'\n        ? this._lastValue\n        : this.props.navigationState.index;\n    const nextPosition =\n      currentPosition - gestureState.dx / width * (I18nManager.isRTL ? -1 : 1);\n    if (this._isMoving === null) {\n      this._isMoving = this._isMovingHorizontally(evt, gestureState);\n    }\n    if (this._isMoving && this._isIndexInRange(nextPosition)) {\n      this.props.position.setValue(nextPosition);\n    }\n  };\n\n  _finishGesture = (evt: GestureEvent, gestureState: GestureState) => {\n    if (typeof this.props.onSwipeEnd === 'function') {\n      this.props.onSwipeEnd(evt, gestureState);\n    }\n    const currentIndex = this.props.navigationState.index;\n    const currentValue = this.props.getLastPosition();\n    if (currentValue !== currentIndex) {\n      if (this._isMoving && !this._isReverseDirection(gestureState)) {\n        const nextIndex = this._getNextIndex(evt, gestureState);\n        this._transitionTo(nextIndex);\n      } else {\n        this._transitionTo(currentIndex);\n      }\n    }\n    this._lastValue = null;\n    this._isMoving = null;\n  };\n\n  _transitionTo = (toValue: number) => {\n    const lastPosition = this.props.getLastPosition();\n    const currentTransitionProps = {\n      progress: lastPosition,\n    };\n    const nextTransitionProps = {\n      progress: toValue,\n    };\n\n    this._pendingIndex = toValue;\n\n    if (this.props.animationEnabled !== false) {\n      const transitionSpec = this.props.configureTransition(\n        currentTransitionProps,\n        nextTransitionProps\n      );\n      const { timing, ...transitionConfig } = transitionSpec;\n\n      timing(this.props.position, {\n        ...transitionConfig,\n        toValue,\n      }).start(({ finished }) => {\n        if (finished) {\n          this.props.jumpToIndex(toValue);\n          this._pendingIndex = null;\n        }\n      });\n    } else {\n      this.props.position.setValue(toValue);\n      this.props.jumpToIndex(toValue);\n      this._pendingIndex = null;\n    }\n  };\n\n  render() {\n    const { layout, position, navigationState, children } = this.props;\n    const { width } = layout;\n    const { routes } = navigationState;\n\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x, i) => i)];\n    const outputRange = inputRange.map(\n      i => width * i * (I18nManager.isRTL ? 1 : -1)\n    );\n\n    const translateX = position.interpolate({\n      inputRange,\n      outputRange,\n    });\n\n    return (\n      <Animated.View\n        style={[\n          styles.sheet,\n          width\n            ? { width: routes.length * width, transform: [{ translateX }] }\n            : null,\n        ]}\n        {...this._panResponder.panHandlers}\n      >\n        {Children.map(children, (child, i) =>\n          <View\n            key={navigationState.routes[i].key}\n            testID={navigationState.routes[i].testID}\n            style={\n              width\n                ? { width }\n                : i === navigationState.index ? StyleSheet.absoluteFill : null\n            }\n          >\n            {i === navigationState.index || width ? child : null}\n          </View>\n        )}\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  sheet: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'stretch',\n  },\n});\n"]}]
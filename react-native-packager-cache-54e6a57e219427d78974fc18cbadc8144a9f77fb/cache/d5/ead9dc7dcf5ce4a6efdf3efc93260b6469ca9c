'use strict';

var _jsxFileName = '/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-native-viewpager/DefaultViewPageIndicator.js';
var React = require('react');
var ReactNative = require('react-native');
var Dimensions = ReactNative.Dimensions,
    StyleSheet = ReactNative.StyleSheet,
    Text = ReactNative.Text,
    TouchableOpacity = ReactNative.TouchableOpacity,
    View = ReactNative.View,
    Animated = ReactNative.Animated;


var deviceWidth = Dimensions.get('window').width;
var DOT_SIZE = 6;
var DOT_SAPCE = 4;

var styles = StyleSheet.create({
  tab: {
    alignItems: 'center'
  },

  tabs: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },

  dot: {
    width: DOT_SIZE,
    height: DOT_SIZE,
    borderRadius: DOT_SIZE / 2,
    backgroundColor: '#E0E1E2',
    marginLeft: DOT_SAPCE,
    marginRight: DOT_SAPCE
  },

  curDot: {
    position: 'absolute',
    width: DOT_SIZE,
    height: DOT_SIZE,
    borderRadius: DOT_SIZE / 2,
    backgroundColor: '#80ACD0',
    margin: DOT_SAPCE,
    bottom: 0
  }
});

var DefaultViewPageIndicator = React.createClass({
  displayName: 'DefaultViewPageIndicator',

  propTypes: {
    goToPage: React.PropTypes.func,
    activePage: React.PropTypes.number,
    pageCount: React.PropTypes.number
  },

  getInitialState: function getInitialState() {
    return {
      viewWidth: 0
    };
  },
  renderIndicator: function renderIndicator(page) {
    var _this = this;

    return React.createElement(
      TouchableOpacity,
      { style: styles.tab, key: 'idc_' + page, onPress: function onPress() {
          return _this.props.goToPage(page);
        }, __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      },
      React.createElement(View, { style: styles.dot, __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      })
    );
  },
  render: function render() {
    var _this2 = this;

    var pageCount = this.props.pageCount;
    var itemWidth = DOT_SIZE + DOT_SAPCE * 2;
    var offset = (this.state.viewWidth - itemWidth * pageCount) / 2 + itemWidth * this.props.activePage;

    var offsetX = itemWidth * (this.props.activePage - this.props.scrollOffset);
    var left = this.props.scrollValue.interpolate({
      inputRange: [0, 1], outputRange: [offsetX, offsetX + itemWidth]
    });

    var indicators = [];
    for (var i = 0; i < pageCount; i++) {
      indicators.push(this.renderIndicator(i));
    }

    return React.createElement(
      View,
      { style: styles.tabs,
        onLayout: function onLayout(event) {
          var viewWidth = event.nativeEvent.layout.width;
          if (!viewWidth || _this2.state.viewWidth === viewWidth) {
            return;
          }
          _this2.setState({
            viewWidth: viewWidth
          });
        }, __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      },
      indicators,
      React.createElement(Animated.View, { style: [styles.curDot, { left: left }], __source: {
          fileName: _jsxFileName,
          lineNumber: 99
        }
      })
    );
  }
});

module.exports = DefaultViewPageIndicator;
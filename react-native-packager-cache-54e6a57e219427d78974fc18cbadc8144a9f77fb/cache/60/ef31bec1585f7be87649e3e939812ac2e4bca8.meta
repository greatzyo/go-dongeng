["0a19f440b08cf69737168c9b308021cfbd467a45","fa67b474dcf57f83db2286862770fe9488f88de1",["react","react-native-drawer-layout-polyfill","../../addNavigationHelpers","./DrawerSidebar"],[87,204,392,542],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/views/Drawer/DrawerView.js"],"names":["DrawerView","_handleDrawerOpen","navigation","props","state","routes","index","routeName","navigate","_handleDrawerClose","_updateScreenNavigation","navigationState","find","route","_screenNavigationProp","_getNavigationState","_renderNavigationView","screenProps","router","contentComponent","contentOptions","style","nextProps","_drawer","openDrawer","drawerShown","closeDrawer","DrawerScreen","getComponentForRouteName","screenNavigation","dispatch","config","getScreenOptions","c","drawerLockMode","drawerWidth","useNativeAnimations","drawerPosition","positions","Right","Left"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react';\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\n\nimport addNavigationHelpers from '../../addNavigationHelpers';\nimport DrawerSidebar from './DrawerSidebar';\n\nimport type {\n  NavigationScreenProp,\n  NavigationRoute,\n  NavigationRouter,\n  NavigationState,\n  NavigationAction,\n  NavigationDrawerScreenOptions,\n  ViewStyleProp,\n} from '../../TypeDefinition';\n\nexport type DrawerScene = {\n  route: NavigationRoute,\n  focused: boolean,\n  index: number,\n  tintColor?: string,\n};\n\nexport type DrawerItem = {\n  route: NavigationRoute,\n  focused: boolean,\n};\n\nexport type DrawerViewConfig = {\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open',\n  drawerWidth?: number,\n  drawerPosition?: 'left' | 'right',\n  contentComponent?: ReactClass<*>,\n  contentOptions?: {},\n  style?: ViewStyleProp,\n  useNativeAnimations?: boolean,\n};\n\ntype Props = DrawerViewConfig & {\n  screenProps?: {},\n  router: NavigationRouter<\n    NavigationState,\n    NavigationAction,\n    NavigationDrawerScreenOptions\n  >,\n  navigation: NavigationScreenProp<NavigationState, NavigationAction>,\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView<T: *> extends PureComponent<void, Props, void> {\n  props: Props;\n\n  componentWillMount() {\n    this._updateScreenNavigation(this.props.navigation);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (\n      this.props.navigation.state.index !== nextProps.navigation.state.index\n    ) {\n      const { routes, index } = nextProps.navigation.state;\n      if (routes[index].routeName === 'DrawerOpen') {\n        this._drawer.openDrawer();\n      } else if (routes[index].routeName === 'DrawerToggle') {\n        if (this._drawer.state.drawerShown) {\n          this.props.navigation.navigate('DrawerClose');\n        } else {\n          this.props.navigation.navigate('DrawerOpen');\n        }\n      } else {\n        this._drawer.closeDrawer();\n      }\n    }\n    this._updateScreenNavigation(nextProps.navigation);\n  }\n\n  _screenNavigationProp: NavigationScreenProp<T, NavigationAction>;\n\n  _handleDrawerOpen = () => {\n    const { navigation } = this.props;\n    const { routes, index } = navigation.state;\n    if (routes[index].routeName !== 'DrawerOpen') {\n      this.props.navigation.navigate('DrawerOpen');\n    }\n  };\n\n  _handleDrawerClose = () => {\n    const { navigation } = this.props;\n    const { routes, index } = navigation.state;\n    if (routes[index].routeName !== 'DrawerClose') {\n      this.props.navigation.navigate('DrawerClose');\n    }\n  };\n\n  _updateScreenNavigation = (\n    navigation: NavigationScreenProp<NavigationState, NavigationAction>\n  ) => {\n    const navigationState = navigation.state.routes.find(\n      (route: *) => route.routeName === 'DrawerClose'\n    );\n    if (\n      this._screenNavigationProp &&\n      this._screenNavigationProp.state === navigationState\n    ) {\n      return;\n    }\n    this._screenNavigationProp = addNavigationHelpers({\n      ...navigation,\n      state: navigationState,\n    });\n  };\n\n  _getNavigationState = (\n    navigation: NavigationScreenProp<NavigationState, NavigationAction>\n  ) => {\n    const navigationState = navigation.state.routes.find(\n      (route: *) => route.routeName === 'DrawerClose'\n    );\n    return navigationState;\n  };\n\n  _renderNavigationView = () => (\n    <DrawerSidebar\n      screenProps={this.props.screenProps}\n      navigation={this._screenNavigationProp}\n      router={this.props.router}\n      contentComponent={this.props.contentComponent}\n      contentOptions={this.props.contentOptions}\n      style={this.props.style}\n    />\n  );\n\n  _drawer: any;\n\n  render() {\n    const DrawerScreen = this.props.router.getComponentForRouteName(\n      'DrawerClose'\n    );\n\n    const screenNavigation = addNavigationHelpers({\n      state: this._screenNavigationProp.state,\n      dispatch: this._screenNavigationProp.dispatch,\n    });\n\n    const config = this.props.router.getScreenOptions(\n      screenNavigation,\n      this.props.screenProps\n    );\n\n    return (\n      <DrawerLayout\n        ref={(c: *) => {\n          this._drawer = c;\n        }}\n        drawerLockMode={\n          (this.props.screenProps && this.props.screenProps.drawerLockMode) ||\n          (config && config.drawerLockMode)\n        }\n        drawerWidth={this.props.drawerWidth}\n        onDrawerOpen={this._handleDrawerOpen}\n        onDrawerClose={this._handleDrawerClose}\n        useNativeAnimations={this.props.useNativeAnimations}\n        renderNavigationView={this._renderNavigationView}\n        drawerPosition={\n          this.props.drawerPosition === 'right'\n            ? DrawerLayout.positions.Right\n            : DrawerLayout.positions.Left\n        }\n      >\n        <DrawerScreen\n          screenProps={this.props.screenProps}\n          navigation={this._screenNavigationProp}\n        />\n      </DrawerLayout>\n    );\n  }\n}\n"]}]
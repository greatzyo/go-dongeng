["b469069cfc513dffba0549d763c1f302997fb191","1f7d391a83f9772e6835e7d0ef08510ef009531f",["react","react-native","../../withCachedChildNavigation","../../NavigationActions"],[87,184,243,412],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/views/Drawer/DrawerSidebar.js"],"names":["DrawerSidebar","_getScreenOptions","routeKey","DrawerScreen","props","router","getComponentForRouteName","childNavigation","childNavigationProps","getScreenOptions","state","index","undefined","screenProps","_getLabel","focused","tintColor","route","key","drawerLabel","title","routeName","_renderIcon","drawerIcon","_onItemPress","navigation","navigate","subAction","routes","ContentComponent","contentComponent","styles","container","style","contentOptions","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport withCachedChildNavigation from '../../withCachedChildNavigation';\nimport NavigationActions from '../../NavigationActions';\n\nimport type {\n  NavigationScreenProp,\n  NavigationRoute,\n  NavigationAction,\n  NavigationRouter,\n  NavigationDrawerScreenOptions,\n  NavigationState,\n  NavigationStateRoute,\n  ViewStyleProp,\n} from '../../TypeDefinition';\n\nimport type { DrawerScene, DrawerItem } from './DrawerView';\n\ntype Navigation = NavigationScreenProp<NavigationStateRoute, NavigationAction>;\n\ntype Props = {\n  router: NavigationRouter<\n    NavigationState,\n    NavigationAction,\n    NavigationDrawerScreenOptions\n  >,\n  navigation: Navigation,\n  childNavigationProps: { [key: string]: Navigation },\n  contentComponent: ReactClass<*>,\n  contentOptions?: {},\n  screenProps?: {},\n  style?: ViewStyleProp,\n};\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\nclass DrawerSidebar extends PureComponent<void, Props, void> {\n  props: Props;\n\n  _getScreenOptions = (routeKey: string) => {\n    const DrawerScreen = this.props.router.getComponentForRouteName(\n      'DrawerClose'\n    );\n    const { [routeKey]: childNavigation } = this.props.childNavigationProps;\n    return DrawerScreen.router.getScreenOptions(\n      childNavigation.state.index !== undefined // if the child screen is a StackRouter then always show the screen options of its first screen (see #1914)\n        ? {\n            ...childNavigation,\n            state: { ...childNavigation.state, index: 0 },\n          }\n        : childNavigation,\n      this.props.screenProps\n    );\n  };\n\n  _getLabel = ({ focused, tintColor, route }: DrawerScene) => {\n    const { drawerLabel, title } = this._getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function'\n        ? drawerLabel({ tintColor, focused })\n        : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  _renderIcon = ({ focused, tintColor, route }: DrawerScene) => {\n    const { drawerIcon } = this._getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function'\n        ? drawerIcon({ tintColor, focused })\n        : drawerIcon;\n    }\n    return null;\n  };\n\n  _onItemPress = ({ route, focused }: DrawerItem) => {\n    this.props.navigation.navigate('DrawerClose');\n    if (!focused) {\n      let subAction;\n      // if the child screen is a StackRouter then always navigate to its first screen (see #1914)\n      if (route.index !== undefined && route.index !== 0) {\n        route = ((route: any): NavigationStateRoute);\n        subAction = NavigationActions.navigate({\n          routeName: route.routes[0].routeName,\n        });\n      }\n      this.props.navigation.navigate(route.routeName, undefined, subAction);\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n    const { state } = this.props.navigation;\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <ContentComponent\n          {...this.props.contentOptions}\n          navigation={this.props.navigation}\n          items={state.routes}\n          activeItemKey={\n            state.routes[state.index] && state.routes[state.index].key\n          }\n          screenProps={this.props.screenProps}\n          getLabel={this._getLabel}\n          renderIcon={this._renderIcon}\n          onItemPress={this._onItemPress}\n          router={this.props.router}\n        />\n      </View>\n    );\n  }\n}\n\nexport default withCachedChildNavigation(DrawerSidebar);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n"]}]
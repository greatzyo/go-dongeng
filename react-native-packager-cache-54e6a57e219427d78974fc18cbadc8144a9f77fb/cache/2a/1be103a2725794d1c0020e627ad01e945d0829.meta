["e1b24a116d84032911df4649c8fbaa0b63eecf6b","6f0166c199b9261705ba9c49775621b93c669480",["react","react-native","../utils/invariant","./ScenesReducer"],[87,184,227,347],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/views/Transitioner.js"],"names":["DefaultTransitionSpec","duration","easing","inOut","ease","timing","Transitioner","props","context","layout","height","Value","initHeight","initWidth","isMeasured","width","state","position","navigation","index","progress","scenes","_prevTransitionProps","_transitionProps","buildTransitionProps","_isMounted","_isTransitionRunning","_queuedTransition","_onLayout","bind","_onTransitionEnd","nextProps","nextScenes","indexHasChanged","_startTransition","nextState","setValue","transitionUserSpec","configureTransition","transitionSpec","toValue","positionHasChanged","__getValue","animations","setState","onTransitionStart","parallel","start","styles","main","style","render","event","nativeEvent","prevTransitionProps","filter","isSceneNotStale","onTransitionEnd","Component","scene","find","isSceneActive","isStale","isActive","create","flex"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React from 'react';\n\nimport { Animated, Easing, StyleSheet, View } from 'react-native';\n\nimport invariant from '../utils/invariant';\n\nimport NavigationScenesReducer from './ScenesReducer';\n\nimport type {\n  NavigationLayout,\n  NavigationScene,\n  NavigationState,\n  NavigationAction,\n  NavigationScreenProp,\n  NavigationTransitionProps,\n  NavigationTransitionSpec,\n} from '../TypeDefinition';\n\ntype Props = {\n  configureTransition: (\n    transitionProps: NavigationTransitionProps,\n    prevTransitionProps: ?NavigationTransitionProps\n  ) => NavigationTransitionSpec,\n  navigation: NavigationScreenProp<NavigationState, NavigationAction>,\n  onTransitionEnd?: (...args: Array<mixed>) => void,\n  onTransitionStart?: (...args: Array<mixed>) => void,\n  render: (\n    transitionProps: NavigationTransitionProps,\n    prevTransitionProps: ?NavigationTransitionProps\n  ) => any,\n  style?: any,\n};\n\ntype State = {\n  layout: NavigationLayout,\n  position: Animated.Value,\n  progress: Animated.Value,\n  scenes: Array<NavigationScene>,\n};\n\n// Used for all animations unless overriden\nconst DefaultTransitionSpec = ({\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing,\n}: NavigationTransitionSpec);\n\nclass Transitioner extends React.Component<*, Props, State> {\n  _onLayout: (event: any) => void;\n  _onTransitionEnd: () => void;\n  _prevTransitionProps: ?NavigationTransitionProps;\n  _transitionProps: NavigationTransitionProps;\n  _isMounted: boolean;\n  _isTransitionRunning: boolean;\n  _queuedTransition: ?{\n    nextProps: Props,\n    nextScenes: Array<NavigationScene>,\n    indexHasChanged: boolean,\n  };\n\n  props: Props;\n  state: State;\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n\n    // The initial layout isn't measured. Measured layout will be only available\n    // when the component is mounted.\n    const layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0),\n    };\n\n    this.state = {\n      layout,\n      position: new Animated.Value(this.props.navigation.state.index),\n      progress: new Animated.Value(1),\n      scenes: NavigationScenesReducer([], this.props.navigation.state),\n    };\n\n    this._prevTransitionProps = null;\n    this._transitionProps = buildTransitionProps(props, this.state);\n    this._isMounted = false;\n    this._isTransitionRunning = false;\n    this._queuedTransition = null;\n  }\n\n  componentWillMount(): void {\n    this._onLayout = this._onLayout.bind(this);\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\n  }\n\n  componentDidMount(): void {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount(): void {\n    this._isMounted = false;\n  }\n\n  componentWillReceiveProps(nextProps: Props): void {\n    const nextScenes = NavigationScenesReducer(\n      this.state.scenes,\n      nextProps.navigation.state,\n      this.props.navigation.state\n    );\n\n    if (nextScenes === this.state.scenes) {\n      return;\n    }\n\n    const indexHasChanged =\n      nextProps.navigation.state.index !== this.props.navigation.state.index;\n    if (this._isTransitionRunning) {\n      this._queuedTransition = { nextProps, nextScenes, indexHasChanged };\n      return;\n    }\n\n    this._startTransition(nextProps, nextScenes, indexHasChanged);\n  }\n\n  _startTransition(\n    nextProps: Props,\n    nextScenes: Array<NavigationScene>,\n    indexHasChanged: boolean\n  ) {\n    const nextState = {\n      ...this.state,\n      scenes: nextScenes,\n    };\n\n    const { position, progress } = nextState;\n\n    progress.setValue(0);\n\n    this._prevTransitionProps = this._transitionProps;\n    this._transitionProps = buildTransitionProps(nextProps, nextState);\n\n    // get the transition spec.\n    const transitionUserSpec = nextProps.configureTransition\n      ? nextProps.configureTransition(\n          this._transitionProps,\n          this._prevTransitionProps\n        )\n      : null;\n\n    const transitionSpec = {\n      ...DefaultTransitionSpec,\n      ...transitionUserSpec,\n    };\n\n    const { timing } = transitionSpec;\n    delete transitionSpec.timing;\n\n    const toValue = nextProps.navigation.state.index;\n    const positionHasChanged = position.__getValue() !== toValue;\n\n    // if swiped back, indexHasChanged == true && positionHasChanged == false\n    const animations =\n      indexHasChanged && positionHasChanged\n        ? [\n            timing(progress, {\n              ...transitionSpec,\n              toValue: 1,\n            }),\n            timing(position, {\n              ...transitionSpec,\n              toValue: nextProps.navigation.state.index,\n            }),\n          ]\n        : [];\n\n    // update scenes and play the transition\n    this._isTransitionRunning = true;\n    this.setState(nextState, () => {\n      nextProps.onTransitionStart &&\n        nextProps.onTransitionStart(\n          this._transitionProps,\n          this._prevTransitionProps\n        );\n      Animated.parallel(animations).start(this._onTransitionEnd);\n    });\n  }\n\n  render() {\n    return (\n      <View onLayout={this._onLayout} style={[styles.main, this.props.style]}>\n        {this.props.render(this._transitionProps, this._prevTransitionProps)}\n      </View>\n    );\n  }\n\n  _onLayout(event: any): void {\n    const { height, width } = event.nativeEvent.layout;\n    if (\n      this.state.layout.initWidth === width &&\n      this.state.layout.initHeight === height\n    ) {\n      return;\n    }\n    const layout = {\n      ...this.state.layout,\n      initHeight: height,\n      initWidth: width,\n      isMeasured: true,\n    };\n\n    layout.height.setValue(height);\n    layout.width.setValue(width);\n\n    const nextState = {\n      ...this.state,\n      layout,\n    };\n\n    this._transitionProps = buildTransitionProps(this.props, nextState);\n    this.setState(nextState);\n  }\n\n  _onTransitionEnd(): void {\n    if (!this._isMounted) {\n      return;\n    }\n    const prevTransitionProps = this._prevTransitionProps;\n    this._prevTransitionProps = null;\n\n    const nextState = {\n      ...this.state,\n      scenes: this.state.scenes.filter(isSceneNotStale),\n    };\n\n    this._transitionProps = buildTransitionProps(this.props, nextState);\n\n    this.setState(nextState, () => {\n      this.props.onTransitionEnd &&\n        this.props.onTransitionEnd(this._transitionProps, prevTransitionProps);\n      if (this._queuedTransition) {\n        this._startTransition(\n          this._queuedTransition.nextProps,\n          this._queuedTransition.nextScenes,\n          this._queuedTransition.indexHasChanged\n        );\n        this._queuedTransition = null;\n      } else {\n        this._isTransitionRunning = false;\n      }\n    });\n  }\n}\n\nfunction buildTransitionProps(\n  props: Props,\n  state: State\n): NavigationTransitionProps {\n  const { navigation } = props;\n\n  const { layout, position, progress, scenes } = state;\n\n  const scene = scenes.find(isSceneActive);\n\n  invariant(scene, 'Could not find active scene');\n\n  return {\n    layout,\n    navigation,\n    position,\n    progress,\n    scenes,\n    scene,\n    index: scene.index,\n  };\n}\n\nfunction isSceneNotStale(scene: NavigationScene): boolean {\n  return !scene.isStale;\n}\n\nfunction isSceneActive(scene: NavigationScene): boolean {\n  return scene.isActive;\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n  },\n});\n\nexport default Transitioner;\n"]}]
["5dc8d0ce4770de7908f7321175b6dff66683a3d6","76b1b56fee8e8c768fd96ed544d592fa06b0f7d0",["react-native"],[93],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/views/CardStack/CardStackStyleInterpolator.js"],"names":["forInitial","props","navigation","scene","focused","state","index","opacity","translate","transform","translateX","translateY","forHorizontal","layout","position","isMeasured","inputRange","width","initWidth","outputRange","isRTL","interpolate","forVertical","height","initHeight","forFadeFromBottomAndroid","canUseNativeDriver"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport { I18nManager } from 'react-native';\n\nimport type {\n  NavigationSceneRendererProps,\n  AnimatedViewStyleProp,\n} from '../../TypeDefinition';\n\n/**\n * Utility that builds the style for the card in the cards stack.\n *\n *     +------------+\n *   +-+            |\n * +-+ |            |\n * | | |            |\n * | | |  Focused   |\n * | | |   Card     |\n * | | |            |\n * +-+ |            |\n *   +-+            |\n *     +------------+\n */\n\n/**\n * Render the initial style when the initial layout isn't measured yet.\n */\nfunction forInitial(\n  props: NavigationSceneRendererProps\n): AnimatedViewStyleProp {\n  const { navigation, scene } = props;\n\n  const focused = navigation.state.index === scene.index;\n  const opacity = focused ? 1 : 0;\n  // If not focused, move the scene far away.\n  const translate = focused ? 0 : 1000000;\n  return {\n    opacity,\n    transform: [{ translateX: translate }, { translateY: translate }],\n  };\n}\n\n/**\n * Standard iOS-style slide in from the right.\n */\nfunction forHorizontal(\n  props: NavigationSceneRendererProps\n): AnimatedViewStyleProp {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  const index = scene.index;\n  const inputRange = [index - 1, index, index + 1];\n\n  const width = layout.initWidth;\n  const outputRange = I18nManager.isRTL\n    ? ([-width, 0, width * 0.3]: Array<number>)\n    : ([width, 0, width * -0.3]: Array<number>);\n\n  // Add [index - 1, index - 0.99] to the interpolated opacity for screen transition.\n  // This makes the screen's shadow to disappear smoothly.\n  const opacity = position.interpolate({\n    inputRange: ([\n      index - 1,\n      index - 0.99,\n      index,\n      index + 0.99,\n      index + 1,\n    ]: Array<number>),\n    outputRange: ([0, 1, 1, 0.85, 0]: Array<number>),\n  });\n\n  const translateY = 0;\n  const translateX = position.interpolate({\n    inputRange,\n    outputRange,\n  });\n\n  return {\n    opacity,\n    transform: [{ translateX }, { translateY }],\n  };\n}\n\n/**\n * Standard iOS-style slide in from the bottom (used for modals).\n */\nfunction forVertical(\n  props: NavigationSceneRendererProps\n): AnimatedViewStyleProp {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  const index = scene.index;\n  const height = layout.initHeight;\n\n  const opacity = position.interpolate({\n    inputRange: ([\n      index - 1,\n      index - 0.99,\n      index,\n      index + 0.99,\n      index + 1,\n    ]: Array<number>),\n    outputRange: ([0, 1, 1, 0.85, 0]: Array<number>),\n  });\n\n  const translateX = 0;\n  const translateY = position.interpolate({\n    inputRange: ([index - 1, index, index + 1]: Array<number>),\n    outputRange: ([height, 0, 0]: Array<number>),\n  });\n\n  return {\n    opacity,\n    transform: [{ translateX }, { translateY }],\n  };\n}\n\n/**\n * Standard Android-style fade in from the bottom.\n */\nfunction forFadeFromBottomAndroid(\n  props: NavigationSceneRendererProps\n): AnimatedViewStyleProp {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  const index = scene.index;\n  const inputRange = [index - 1, index, index + 0.99, index + 1];\n\n  const opacity = position.interpolate({\n    inputRange,\n    outputRange: ([0, 1, 1, 0]: Array<number>),\n  });\n\n  const translateX = 0;\n  const translateY = position.interpolate({\n    inputRange,\n    outputRange: ([50, 0, 0, 0]: Array<number>),\n  });\n\n  return {\n    opacity,\n    transform: [{ translateX }, { translateY }],\n  };\n}\n\nfunction canUseNativeDriver(): boolean {\n  // The native driver can be enabled for this interpolator animating\n  // opacity, translateX, and translateY is supported by the native animation\n  // driver on iOS and Android.\n  return true;\n}\n\nexport default {\n  forHorizontal,\n  forVertical,\n  forFadeFromBottomAndroid,\n  canUseNativeDriver,\n};\n"]}]
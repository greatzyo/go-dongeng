["39f0822e41b4ec8e4ee6cfcc731f5af7f8a63992","32370974eb976605a45b673f14c3e4dfdc8100bd",["react","prop-types","react-native/Libraries/Renderer/shims/createReactNativeComponentClass","../lib/extract/extractText","../lib/props","../lib/attributes","../lib/extract/extractProps","./Shape"],[89,184,314,527,651,695,746,874],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-native-svg/elements/TSpan.js"],"names":["isInAParentText","PropTypes","bool","props","root","ele","x","y","displayName","propTypes","dx","dy","textAnchor","oneOf","childContextTypes","setNativeProps","RNSVGTSpan","validAttributes","uiViewClassName"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;0CAkBsB;AACd,mBAAO;AACHA,iCAAiB;AADd,aAAP;AAGH;;;0CAEiB;AACd,mBAAO;AACHA,iCAAiB,gBAAMC,SAAN,CAAgBC;AAD9B,aAAP;AAGH;;;iCAMQ;AAAA;;AACL,gBAAIC,QAAQ,KAAKA,KAAjB;AACA,mBAAO,8BAAC,UAAD;AACH,qBAAK,kBAAO;AAAC,2BAAKC,IAAL,GAAYC,GAAZ;AAAiB;AAD3B,eAEC,qDACGF,KADH;AAEAG,mBAAG,IAFH;AAGAC,mBAAG;AAHH,gBAID,IAJC,CAFD,EAOC,2BAAYJ,KAAZ,CAPD,EAAP;AASH;;;;;OAzCMK,W,GAAc,O;OAEdC,S;AAGHC,yB;AACAC,yB;AACAC,gBAAY,oBAAUC,KAAV,CAAgB,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,CAAhB;;OAGTC,iB,GAAoB;AACvBd,qBAAiB,gBAAMC,SAAN,CAAgBC;AADV,C;;;;;SAgB3Ba,c,GAAiB,YAAa;AAAA;;AAC1B,wBAAKX,IAAL,EAAUW,cAAV;AACH,K;;;;;;AAgBL,IAAMC,aAAa,+CAAgC;AAC/CC,+CAD+C;AAE/CC,qBAAiB;AAF8B,CAAhC,CAAnB","sourcesContent":["import React  from 'react';\nimport PropTypes from 'prop-types';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/shims/createReactNativeComponentClass';\nimport extractText from '../lib/extract/extractText';\nimport {numberProp, pathProps, fontProps} from '../lib/props';\nimport {TSpanAttibutes} from '../lib/attributes';\nimport extractProps from '../lib/extract/extractProps';\nimport Shape from './Shape';\n\n// TSpan elements are shadow components\nexport default class extends Shape {\n    static displayName = 'TSpan';\n\n    static propTypes = {\n        ...pathProps,\n        ...fontProps,\n        dx: numberProp,\n        dy: numberProp,\n        textAnchor: PropTypes.oneOf(['start', 'middle', 'end'])\n    };\n\n    static childContextTypes = {\n        isInAParentText: React.PropTypes.bool\n    };\n\n    getChildContext() {\n        return {\n            isInAParentText: true\n        };\n    };\n\n    getContextTypes() {\n        return {\n            isInAParentText: React.PropTypes.bool\n        };\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let props = this.props;\n        return <RNSVGTSpan\n            ref={ele => {this.root = ele;}}\n            {...extractProps({\n                ...props,\n                x: null,\n                y: null\n            }, this)}\n            {...extractText(props)}\n        />;\n    }\n}\n\nconst RNSVGTSpan = createReactNativeComponentClass({\n    validAttributes: TSpanAttibutes,\n    uiViewClassName: 'RNSVGTSpan'\n});\n"]}]
["a0b817f5c47a6baee517a467237829cb2ec6bfce","089942d76a354525fd430d1014e8174104e95410",["react-native","expo","invariant","qs","regenerator-runtime"],[93,131,166,266,360],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/expo/src/AuthSession.js"],"names":["BASE_URL","_authLock","startAsync","options","returnUrl","getDefaultReturnUrl","authUrl","startUrl","getStartUrl","Error","__DEV__","console","warn","type","result","error","Promise","race","_openWebBrowserAsync","_waitForRedirectAsync","_closeWebBrowser","_stopWaitingForRedirect","dismiss","dismissBrowser","openBrowserAsync","_redirectHandler","event","url","startsWith","parseUrl","params","errorCode","resolve","addEventListener","removeEventListener","queryString","stringify","getRedirectUrl","redirectUrl","manifest","id","_warnIfAnonymous","linkingUrl","parts","split","hash","partsWithoutHash","length","parsedSearch","parse","parsedHash","getRedirectUri"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport { Linking } from 'react-native';\nimport { Constants, WebBrowser } from 'expo';\nimport invariant from 'invariant';\nimport qs from 'qs';\n\ntype AuthSessionOptions = {\n  authUrl: string,\n  returnUrl?: string,\n};\n\ntype AuthSessionResult =\n  | { type: 'cancel' | 'dismissed' | 'locked' }\n  | {\n      type: 'error' | 'success',\n      event: RedirectEvent,\n      errorCode: ?string,\n      params: Object,\n    };\n\ntype RedirectEvent = {\n  url: string,\n};\n\nconst BASE_URL = `https://auth.expo.io`;\nlet _authLock = false;\n\nasync function startAsync(\n  options: AuthSessionOptions\n): Promise<AuthSessionResult> {\n  const returnUrl = options.returnUrl || getDefaultReturnUrl();\n  const authUrl = options.authUrl;\n  const startUrl = getStartUrl(authUrl, returnUrl);\n\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time'\n      );\n    }\n\n    return { type: 'locked' };\n  } else {\n    _authLock = true;\n  }\n\n  let result;\n  let error;\n  try {\n    result = await Promise.race([\n      _openWebBrowserAsync(startUrl),\n      _waitForRedirectAsync(returnUrl),\n    ]);\n  } catch (e) {\n    error = e;\n  }\n\n  _closeWebBrowser();\n  _stopWaitingForRedirect();\n  _authLock = false;\n\n  if (error) {\n    throw error;\n  } else if (!result || !result.type) {\n    throw new Error('Unexpected AuthSession result');\n  } else {\n    return result;\n  }\n}\n\nfunction dismiss() {\n  WebBrowser.dismissBrowser();\n}\n\nasync function _openWebBrowserAsync(startUrl) {\n  let result = await WebBrowser.openBrowserAsync(startUrl);\n  if (result.type === 'cancel' || result.type === 'dismissed') {\n    return { type: result.type };\n  }\n}\n\nfunction _closeWebBrowser() {\n  WebBrowser.dismissBrowser();\n}\n\nlet _redirectHandler;\nfunction _waitForRedirectAsync(returnUrl) {\n  invariant(\n    !_redirectHandler,\n    'AuthSession is in a bad state. _redirectHandler is defined when it should not be.'\n  );\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        let { params, errorCode } = parseUrl(event.url);\n\n        resolve({\n          type: errorCode ? 'error' : 'success',\n          params,\n          errorCode,\n          event,\n        });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n\nfunction _stopWaitingForRedirect() {\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction getStartUrl(authUrl: string, returnUrl: string): string {\n  let queryString = qs.stringify({\n    authUrl,\n    returnUrl,\n  });\n\n  return `${getRedirectUrl()}/start?${queryString}`;\n}\n\nfunction getRedirectUrl(): string {\n  const redirectUrl = `${BASE_URL}/${Constants.manifest.id}`;\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl(): string {\n  return `${Constants.linkingUrl}expo-auth-session`;\n}\n\nfunction parseUrl(url: string): { errorCode: ?string, params: Object } {\n  let parts = url.split('#');\n  let hash = parts[1];\n  let partsWithoutHash = parts[0].split('?');\n  let queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  let parsedSearch = qs.parse(queryString);\n\n  // Pull errorCode off of params\n  let { errorCode } = parsedSearch;\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  let params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n\nfunction _warnIfAnonymous(id, url): void {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\n      `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n    );\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n  get getRedirectUri() {\n    console.warn(\n      'Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)'\n    );\n    return getRedirectUrl;\n  },\n  startAsync,\n};\n"]}]
["112729c8efd8977b480538b30ac049d7684981dc","2572f735c5fb6a33d88d5ce5ac45c4c0e6d38d7d",["react","react-native","./CardStack","./CardStackStyleInterpolator","../Transitioner","./TransitionConfigs"],[87,184,227,353,516,643],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/views/CardStack/CardStackTransitioner.js"],"names":["NativeAnimatedModule","CardStackTransitioner","_configureTransition","transitionProps","prevTransitionProps","isModal","props","mode","transitionSpec","getTransitionConfig","transitionConfig","canUseNativeDriver","useNativeDriver","_render","screenProps","headerMode","router","cardStyle","style","navigation","onTransitionStart","onTransitionEnd","defaultProps"],"mappings":";;;;AAEA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAeA,IAAMA,uBACJ,8BAAiB,2BAAcA,oBADjC;;IA2BMC,qB;;;;;;;;;;;;;;gOAoBJC,oB,GAAuB,UAErBC,eAFqB,EAIrBC,mBAJqB,EAKlB;AACH,UAAMC,UAAU,MAAKC,KAAL,CAAWC,IAAX,KAAoB,OAApC;;AAGA,UAAMC,0CACD,4BAAkBC,mBAAlB,CACD,MAAKH,KAAL,CAAWI,gBADV,EAEDP,eAFC,EAGDC,mBAHC,EAIDC,OAJC,EAKDG,cANE,CAAN;AAQA,UACE,CAAC,CAACR,oBAAF,IAEA,qCAA2BW,kBAA3B,EAHF,EAIE;AAEAH,uBAAeI,eAAf,GAAiC,IAAjC;AACD;AACD,aAAOJ,cAAP;AACD,K,QAEDK,O,GAAU,UAACP,KAAD,EAAwD;AAAA,wBAS5D,MAAKA,KATuD;AAAA,UAE9DQ,WAF8D,eAE9DA,WAF8D;AAAA,UAG9DC,UAH8D,eAG9DA,UAH8D;AAAA,UAI9DR,IAJ8D,eAI9DA,IAJ8D;AAAA,UAK9DS,MAL8D,eAK9DA,MAL8D;AAAA,UAM9DC,SAN8D,eAM9DA,SAN8D;AAAA,UAO9DP,gBAP8D,eAO9DA,gBAP8D;AAAA,UAQ9DQ,KAR8D,eAQ9DA,KAR8D;;AAUhE,aACE;AACE,qBAAaJ,WADf;AAEE,oBAAYC,UAFd;AAGE,cAAMR,IAHR;AAIE,gBAAQS,MAJV;AAKE,mBAAWC,SALb;AAME,0BAAkBP,gBANpB;AAOE,eAAOQ;AAPT,SAQMZ,KARN,EADF;AAYD,K;;;;;6BA/DQ;AACP,aACE;AACE,6BAAqB,KAAKJ,oBAD5B;AAEE,oBAAY,KAAKI,KAAL,CAAWa,UAFzB;AAGE,gBAAQ,KAAKN,OAHf;AAIE,eAAO,KAAKP,KAAL,CAAWY,KAJpB;AAKE,2BAAmB,KAAKZ,KAAL,CAAWc,iBALhC;AAME,yBAAiB,KAAKd,KAAL,CAAWe;AAN9B,QADF;AAUD;;;;;AAlBGpB,qB,CAGGqB,Y,GAA6B;AAClCf,QAAM;AAD4B,C;kBAsEvBN,qB","sourcesContent":["/* @flow */\n\nimport React, { Component } from 'react';\nimport { NativeModules } from 'react-native';\n\nimport CardStack from './CardStack';\nimport CardStackStyleInterpolator from './CardStackStyleInterpolator';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './TransitionConfigs';\n\nimport type {\n  NavigationAction,\n  NavigationSceneRenderer,\n  NavigationScreenProp,\n  NavigationStackScreenOptions,\n  NavigationState,\n  NavigationTransitionProps,\n  NavigationRouter,\n  HeaderMode,\n  ViewStyleProp,\n  TransitionConfig,\n} from '../../TypeDefinition';\n\nconst NativeAnimatedModule =\n  NativeModules && NativeModules.NativeAnimatedModule;\n\ntype Props = {\n  screenProps?: {},\n  headerMode: HeaderMode,\n  mode: 'card' | 'modal',\n  navigation: NavigationScreenProp<NavigationState, NavigationAction>,\n  router: NavigationRouter<\n    NavigationState,\n    NavigationAction,\n    NavigationStackScreenOptions\n  >,\n  cardStyle?: ViewStyleProp,\n  onTransitionStart?: () => void,\n  onTransitionEnd?: () => void,\n  style: ViewStyleProp,\n  /**\n   * Optional custom animation when transitioning between screens.\n   */\n  transitionConfig?: () => TransitionConfig,\n};\n\ntype DefaultProps = {\n  mode: 'card' | 'modal',\n};\n\nclass CardStackTransitioner extends Component<DefaultProps, Props, void> {\n  _render: NavigationSceneRenderer;\n\n  static defaultProps: DefaultProps = {\n    mode: 'card',\n  };\n\n  render() {\n    return (\n      <Transitioner\n        configureTransition={this._configureTransition}\n        navigation={this.props.navigation}\n        render={this._render}\n        style={this.props.style}\n        onTransitionStart={this.props.onTransitionStart}\n        onTransitionEnd={this.props.onTransitionEnd}\n      />\n    );\n  }\n\n  _configureTransition = (\n    // props for the new screen\n    transitionProps: NavigationTransitionProps,\n    // props for the old screen\n    prevTransitionProps: NavigationTransitionProps\n  ) => {\n    const isModal = this.props.mode === 'modal';\n    // Copy the object so we can assign useNativeDriver below\n    // (avoid Flow error, transitionSpec is of type NavigationTransitionSpec).\n    const transitionSpec = {\n      ...TransitionConfigs.getTransitionConfig(\n        this.props.transitionConfig,\n        transitionProps,\n        prevTransitionProps,\n        isModal\n      ).transitionSpec,\n    };\n    if (\n      !!NativeAnimatedModule &&\n      // Native animation support also depends on the transforms used:\n      CardStackStyleInterpolator.canUseNativeDriver()\n    ) {\n      // Internal undocumented prop\n      transitionSpec.useNativeDriver = true;\n    }\n    return transitionSpec;\n  };\n\n  _render = (props: NavigationTransitionProps): React.Element<*> => {\n    const {\n      screenProps,\n      headerMode,\n      mode,\n      router,\n      cardStyle,\n      transitionConfig,\n      style,\n    } = this.props;\n    return (\n      <CardStack\n        screenProps={screenProps}\n        headerMode={headerMode}\n        mode={mode}\n        router={router}\n        cardStyle={cardStyle}\n        transitionConfig={transitionConfig}\n        style={style}\n        {...props}\n      />\n    );\n  };\n}\n\nexport default CardStackTransitioner;\n"]}]
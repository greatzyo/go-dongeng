["e4c8f0897150da83a81658a98c9df148f2e64701","783f46b3226e39cfff566be41178a972f95fa306",[],[],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/utils/invariant.js"],"names":["validateFormat","format","__DEV__","undefined","Error","invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop","module","exports"],"mappings":";;AAWA;;AAaA,IAAIA,iBAAiB,wBAASC,MAAT,EAAiB,CAAE,CAAxC;;AAEA,IAAIC,OAAJ,EAAa;AACXF,mBAAiB,wBAASC,MAAT,EAAiB;AAChC,QAAIA,WAAWE,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;AACF,GAJD;AAKD;;AAED,SAASC,SAAT,CAAmBC,SAAnB,EAA8BL,MAA9B,EAAsCM,CAAtC,EAAyCC,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,EAAkDC,CAAlD,EAAqDC,CAArD,EAAwD;AACtDZ,iBAAeC,MAAf;;AAEA,MAAI,CAACK,SAAL,EAAgB;AACd,QAAIO,KAAJ;AACA,QAAIZ,WAAWE,SAAf,EAA0B;AACxBU,cAAQ,IAAIT,KAAJ,CACN,+HADM,CAAR;AAGD,KAJD,MAIO;AACL,UAAIU,OAAO,CAACP,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,CAAX;AACA,UAAIG,WAAW,CAAf;AACAF,cAAQ,IAAIT,KAAJ,CACNH,OAAOe,OAAP,CAAe,KAAf,EAAsB,YAAW;AAC/B,eAAOF,KAAKC,UAAL,CAAP;AACD,OAFD,CADM,CAAR;AAKAF,YAAMI,IAAN,GAAa,qBAAb;AACD;;AAEDJ,UAAMK,WAAN,GAAoB,CAApB;AACA,UAAML,KAAN;AACD;AACF;;AAEDM,OAAOC,OAAP,GAAiBf,SAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function(format) {};\n\nif (__DEV__) {\n  validateFormat = function(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n"]}]
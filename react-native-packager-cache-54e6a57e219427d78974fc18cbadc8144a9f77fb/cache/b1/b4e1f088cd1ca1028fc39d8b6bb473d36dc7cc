'use strict';

var _jsxFileName = '/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-native-viewpager/ViewPager.js';
var React = require('react');
var PropTypes = React.PropTypes;


var ReactNative = require('react-native');
var Dimensions = ReactNative.Dimensions,
    Text = ReactNative.Text,
    View = ReactNative.View,
    TouchableOpacity = ReactNative.TouchableOpacity,
    PanResponder = ReactNative.PanResponder,
    Animated = ReactNative.Animated,
    StyleSheet = ReactNative.StyleSheet;


var StaticRenderer = require('react-native/Libraries/Components/StaticRenderer');
var TimerMixin = require('react-timer-mixin');

var DefaultViewPageIndicator = require('./DefaultViewPageIndicator');
var deviceWidth = Dimensions.get('window').width;
var ViewPagerDataSource = require('./ViewPagerDataSource');

var ViewPager = React.createClass({
  displayName: 'ViewPager',

  mixins: [TimerMixin],

  statics: {
    DataSource: ViewPagerDataSource
  },

  propTypes: babelHelpers.extends({}, View.propTypes, {
    dataSource: PropTypes.instanceOf(ViewPagerDataSource).isRequired,
    renderPage: PropTypes.func.isRequired,
    onChangePage: PropTypes.func,
    renderPageIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    isLoop: PropTypes.bool,
    locked: PropTypes.bool,
    autoPlay: PropTypes.bool,
    animation: PropTypes.func,
    initialPage: PropTypes.number
  }),

  fling: false,

  getDefaultProps: function getDefaultProps() {
    return {
      isLoop: false,
      locked: false,
      animation: function animation(animate, toValue, gs) {
        return Animated.spring(animate, {
          toValue: toValue,
          friction: 10,
          tension: 50
        });
      }
    };
  },
  getInitialState: function getInitialState() {
    return {
      currentPage: 0,
      viewWidth: 0,
      scrollValue: new Animated.Value(0)
    };
  },
  componentWillMount: function componentWillMount() {
    var _this = this;

    this.childIndex = 0;

    var release = function release(e, gestureState) {
      var relativeGestureDistance = gestureState.dx / deviceWidth,
          vx = gestureState.vx;

      var step = 0;
      if (relativeGestureDistance < -0.5 || relativeGestureDistance < 0 && vx <= -1e-6) {
        step = 1;
      } else if (relativeGestureDistance > 0.5 || relativeGestureDistance > 0 && vx >= 1e-6) {
        step = -1;
      }

      _this.props.hasTouch && _this.props.hasTouch(false);

      _this.movePage(step, gestureState);
    };

    this._panResponder = PanResponder.create({
      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gestureState) {
        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {
          if (_this.props.locked !== true && !_this.fling) {
            _this.props.hasTouch && _this.props.hasTouch(true);
            return true;
          }
        }
      },

      onPanResponderRelease: release,
      onPanResponderTerminate: release,

      onPanResponderMove: function onPanResponderMove(e, gestureState) {
        var dx = gestureState.dx;
        var offsetX = -dx / _this.state.viewWidth + _this.childIndex;
        _this.state.scrollValue.setValue(offsetX);
      }
    });

    if (this.props.isLoop) {
      this.childIndex = 1;
      this.state.scrollValue.setValue(1);
    }
    if (this.props.initialPage) {
      var initialPage = Number(this.props.initialPage);
      if (initialPage > 0) {
        this.goToPage(initialPage, false);
      }
    }
  },
  componentDidMount: function componentDidMount() {
    if (this.props.autoPlay) {
      this._startAutoPlay();
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.autoPlay) {
      this._startAutoPlay();
    } else {
      if (this._autoPlayer) {
        this.clearInterval(this._autoPlayer);
        this._autoPlayer = null;
      }
    }

    if (nextProps.dataSource) {
      var maxPage = nextProps.dataSource.getPageCount() - 1;
      var constrainedPage = Math.max(0, Math.min(this.state.currentPage, maxPage));
      this.setState({
        currentPage: constrainedPage
      });

      if (!nextProps.isLoop) {
        this.state.scrollValue.setValue(constrainedPage > 0 ? 1 : 0);
      }

      this.childIndex = Math.min(this.childIndex, constrainedPage);
      this.fling = false;
    }
  },
  _startAutoPlay: function _startAutoPlay() {
    var _this2 = this;

    if (!this._autoPlayer) {
      this._autoPlayer = this.setInterval(function () {
        _this2.movePage(1);
      }, 5000);
    }
  },
  goToPage: function goToPage(pageNumber) {
    var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


    var pageCount = this.props.dataSource.getPageCount();
    if (pageNumber < 0 || pageNumber >= pageCount) {
      console.error('Invalid page number: ', pageNumber);
      return;
    }

    var step = pageNumber - this.state.currentPage;
    this.movePage(step, null, animate);
  },
  movePage: function movePage(step, gs) {
    var _this3 = this;

    var animate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    var pageCount = this.props.dataSource.getPageCount();
    var pageNumber = this.state.currentPage + step;
    if (this.props.isLoop) {
      pageNumber = pageCount == 0 ? pageNumber = 0 : (pageNumber + pageCount) % pageCount;
    } else {
      pageNumber = Math.min(Math.max(0, pageNumber), pageCount - 1);
    }

    var moved = pageNumber !== this.state.currentPage;
    var scrollStep = (moved ? step : 0) + this.childIndex;
    var nextChildIdx = pageNumber > 0 || this.props.isLoop ? 1 : 0;

    var postChange = function postChange() {
      _this3.fling = false;
      _this3.childIndex = nextChildIdx;
      _this3.state.scrollValue.setValue(nextChildIdx);
      _this3.setState({
        currentPage: pageNumber
      });
    };

    if (animate) {
      this.fling = true;
      this.props.animation(this.state.scrollValue, scrollStep, gs).start(function (event) {
        if (event.finished) {
          postChange();
        }
        moved && _this3.props.onChangePage && _this3.props.onChangePage(pageNumber);
      });
    } else {
      postChange();
      moved && this.props.onChangePage && this.props.onChangePage(pageNumber);
    }
  },
  getCurrentPage: function getCurrentPage() {
    return this.state.currentPage;
  },
  renderPageIndicator: function renderPageIndicator(props) {
    if (this.props.renderPageIndicator === false) {
      return null;
    } else if (this.props.renderPageIndicator) {
      return React.cloneElement(this.props.renderPageIndicator(), props);
    } else {
      return React.createElement(
        View,
        { style: styles.indicators, __source: {
            fileName: _jsxFileName,
            lineNumber: 231
          }
        },
        React.createElement(DefaultViewPageIndicator, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 232
          }
        }))
      );
    }
  },
  _getPage: function _getPage(pageIdx) {
    var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var dataSource = this.props.dataSource;
    var pageID = dataSource.pageIdentities[pageIdx];
    return React.createElement(StaticRenderer, {
      key: 'p_' + pageID + (loop ? '_1' : ''),
      shouldUpdate: true,
      render: this.props.renderPage.bind(null, dataSource.getPageData(pageIdx), pageID, this.state.currentPage),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 242
      }
    });
  },
  render: function render() {
    var _this4 = this;

    var dataSource = this.props.dataSource;
    var pageIDs = dataSource.pageIdentities;

    var bodyComponents = [];

    var pagesNum = 0;
    var hasLeft = false;
    var viewWidth = this.state.viewWidth;

    if (pageIDs.length > 0 && viewWidth > 0) {
      if (this.state.currentPage > 0) {
        bodyComponents.push(this._getPage(this.state.currentPage - 1));
        pagesNum++;
        hasLeft = true;
      } else if (this.state.currentPage == 0 && this.props.isLoop) {
        bodyComponents.push(this._getPage(pageIDs.length - 1, true));
        pagesNum++;
        hasLeft = true;
      }

      bodyComponents.push(this._getPage(this.state.currentPage));
      pagesNum++;

      if (this.state.currentPage < pageIDs.length - 1) {
        bodyComponents.push(this._getPage(this.state.currentPage + 1));
        pagesNum++;
      } else if (this.state.currentPage == pageIDs.length - 1 && this.props.isLoop) {
        bodyComponents.push(this._getPage(0, true));
        pagesNum++;
      }
    }

    var sceneContainerStyle = {
      width: viewWidth * pagesNum,
      flex: 1,
      flexDirection: 'row'
    };

    var translateX = this.state.scrollValue.interpolate({
      inputRange: [0, 1], outputRange: [0, -viewWidth]
    });

    return React.createElement(
      View,
      { style: { flex: 1 },
        onLayout: function onLayout(event) {
          var viewWidth = event.nativeEvent.layout.width;
          if (!viewWidth || _this4.state.viewWidth === viewWidth) {
            return;
          }
          _this4.setState({
            currentPage: _this4.state.currentPage,
            viewWidth: viewWidth
          });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 304
        }
      },
      React.createElement(
        Animated.View,
        babelHelpers.extends({ style: [sceneContainerStyle, { transform: [{ translateX: translateX }] }]
        }, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 318
          }
        }),
        bodyComponents
      ),
      this.renderPageIndicator({ goToPage: this.goToPage,
        pageCount: pageIDs.length,
        activePage: this.state.currentPage,
        scrollValue: this.state.scrollValue,
        scrollOffset: this.childIndex
      })
    );
  }
});

var styles = StyleSheet.create({
  indicators: {
    flex: 1,
    alignItems: 'center',
    position: 'absolute',
    bottom: 10,
    left: 0,
    right: 0,
    backgroundColor: 'transparent'
  }
});

module.exports = ViewPager;
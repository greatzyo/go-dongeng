["88b3eecd10ee1a2283c43d4949c80182e75dddd0","d5a48365f89574590b947e9546973e760bada556",["react","react-native","react-native-tab-view","../SceneView","../../withCachedChildNavigation"],[87,184,236,288,414],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/views/TabView/TabView.js"],"names":["TabView","_handlePageChanged","index","navigation","props","navigate","state","routes","routeName","_renderScene","route","screenProps","childNavigation","childNavigationProps","key","TabComponent","router","getComponentForRouteName","styles","page","_getLabel","tintColor","focused","options","getScreenOptions","tabBarLabel","title","_getOnPress","tabBarOnPress","_renderIcon","tabBarIcon","_renderTabBar","tabBarOptions","TabBarComponent","tabBarComponent","animationEnabled","_renderPager","tabBarPosition","swipeEnabled","lazy","renderHeader","renderFooter","renderPager","tabBarVisible","undefined","renderScene","onIndexChange","navigationState","style","container","create","flex","overflow"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TabViewAnimated, TabViewPagerPan } from 'react-native-tab-view';\nimport SceneView from '../SceneView';\nimport withCachedChildNavigation from '../../withCachedChildNavigation';\n\nimport type {\n  NavigationScreenProp,\n  NavigationRoute,\n  NavigationAction,\n  NavigationState,\n  NavigationRouter,\n  NavigationTabScreenOptions,\n} from '../../TypeDefinition';\n\nexport type TabViewConfig = {\n  tabBarComponent?: ReactClass<*>,\n  tabBarPosition?: 'top' | 'bottom',\n  tabBarOptions?: {},\n  swipeEnabled?: boolean,\n  animationEnabled?: boolean,\n  lazy?: boolean,\n};\n\nexport type TabScene = {\n  route: NavigationRoute,\n  focused: boolean,\n  index: number,\n  tintColor?: ?string,\n};\n\ntype Props = {\n  tabBarComponent?: ReactClass<*>,\n  tabBarPosition?: 'top' | 'bottom',\n  tabBarOptions?: {},\n  swipeEnabled?: boolean,\n  animationEnabled?: boolean,\n  lazy?: boolean,\n\n  screenProps?: {},\n  navigation: NavigationScreenProp<NavigationState, NavigationAction>,\n  router: NavigationRouter<\n    NavigationState,\n    NavigationAction,\n    NavigationTabScreenOptions\n  >,\n  childNavigationProps: {\n    [key: string]: NavigationScreenProp<NavigationRoute, NavigationAction>,\n  },\n};\n\nclass TabView extends PureComponent<void, Props, void> {\n  props: Props;\n\n  _handlePageChanged = (index: number) => {\n    const { navigation } = this.props;\n    navigation.navigate(navigation.state.routes[index].routeName);\n  };\n\n  _renderScene = ({ route }: any) => {\n    const { screenProps } = this.props;\n    const childNavigation = this.props.childNavigationProps[route.key];\n    const TabComponent = this.props.router.getComponentForRouteName(\n      route.routeName\n    );\n    return (\n      <View style={styles.page}>\n        <SceneView\n          screenProps={screenProps}\n          component={TabComponent}\n          navigation={childNavigation}\n        />\n      </View>\n    );\n  };\n\n  _getLabel = ({ route, tintColor, focused }: TabScene) => {\n    const options = this.props.router.getScreenOptions(\n      this.props.childNavigationProps[route.key],\n      this.props.screenProps || {}\n    );\n\n    if (options.tabBarLabel) {\n      return typeof options.tabBarLabel === 'function'\n        ? options.tabBarLabel({ tintColor, focused })\n        : options.tabBarLabel;\n    }\n\n    if (typeof options.title === 'string') {\n      return options.title;\n    }\n\n    return route.routeName;\n  };\n\n  _getOnPress = ({ route }: TabScene) => {\n    const options = this.props.router.getScreenOptions(\n      this.props.childNavigationProps[route.key],\n      this.props.screenProps || {}\n    );\n\n    return options.tabBarOnPress;\n  };\n\n  _renderIcon = ({ focused, route, tintColor }: TabScene) => {\n    const options = this.props.router.getScreenOptions(\n      this.props.childNavigationProps[route.key],\n      this.props.screenProps || {}\n    );\n    if (options.tabBarIcon) {\n      return typeof options.tabBarIcon === 'function'\n        ? options.tabBarIcon({ tintColor, focused })\n        : options.tabBarIcon;\n    }\n    return null;\n  };\n\n  _renderTabBar = (props: *) => {\n    const {\n      tabBarOptions,\n      tabBarComponent: TabBarComponent,\n      animationEnabled,\n    } = this.props;\n    if (typeof TabBarComponent === 'undefined') {\n      return null;\n    }\n    return (\n      <TabBarComponent\n        {...props}\n        {...tabBarOptions}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        getLabel={this._getLabel}\n        getOnPress={this._getOnPress}\n        renderIcon={this._renderIcon}\n        animationEnabled={animationEnabled}\n      />\n    );\n  };\n\n  _renderPager = (props: *) => <TabViewPagerPan {...props} />;\n\n  render() {\n    const {\n      router,\n      tabBarComponent,\n      tabBarPosition,\n      animationEnabled,\n      swipeEnabled,\n      lazy,\n      screenProps,\n    } = this.props;\n\n    let renderHeader;\n    let renderFooter;\n    let renderPager;\n\n    const { state } = this.props.navigation;\n    const options = router.getScreenOptions(\n      this.props.childNavigationProps[state.routes[state.index].key],\n      screenProps || {}\n    );\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    if (tabBarComponent !== undefined && tabBarVisible) {\n      if (tabBarPosition === 'bottom') {\n        renderFooter = this._renderTabBar;\n      } else {\n        renderHeader = this._renderTabBar;\n      }\n    }\n\n    if (animationEnabled === false && swipeEnabled === false) {\n      renderPager = this._renderPager;\n    }\n\n    const props = {\n      lazy,\n      animationEnabled,\n      swipeEnabled,\n      renderPager,\n      renderHeader,\n      renderFooter,\n      renderScene: this._renderScene,\n      onIndexChange: this._handlePageChanged,\n      navigationState: this.props.navigation.state,\n      screenProps: this.props.screenProps,\n      style: styles.container,\n    };\n\n    return <TabViewAnimated {...props} />;\n  }\n}\n\nexport default withCachedChildNavigation(TabView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n\n  page: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}]
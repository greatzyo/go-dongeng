["c7861b91241002fede129686fd4bcc5581e9320e","6954bb7b0031cba14be479ac0f92fb0df4a33538",["react","react-native","../TouchableItem"],[87,184,231],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/views/Drawer/DrawerNavigatorItems.js"],"names":["DrawerNavigatorItems","navigation","state","navigate","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","style","labelStyle","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","item","inactiveIcon","defaultProps","create","marginTop","OS","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":";;;;AAEA;;;;AACA;;AAEA;;;;AA8BA,IAAMA,uBAAuB,SAAvBA,oBAAuB;AAAA,6BAC3BC,UAD2B;AAAA,MACbC,KADa,mBACbA,KADa;AAAA,MACNC,QADM,mBACNA,QADM;AAAA,MAE3BC,KAF2B,QAE3BA,KAF2B;AAAA,MAG3BC,aAH2B,QAG3BA,aAH2B;AAAA,MAI3BC,eAJ2B,QAI3BA,eAJ2B;AAAA,MAK3BC,qBAL2B,QAK3BA,qBAL2B;AAAA,MAM3BC,iBAN2B,QAM3BA,iBAN2B;AAAA,MAO3BC,uBAP2B,QAO3BA,uBAP2B;AAAA,MAQ3BC,QAR2B,QAQ3BA,QAR2B;AAAA,MAS3BC,UAT2B,QAS3BA,UAT2B;AAAA,MAU3BC,WAV2B,QAU3BA,WAV2B;AAAA,MAW3BC,KAX2B,QAW3BA,KAX2B;AAAA,MAY3BC,UAZ2B,QAY3BA,UAZ2B;AAAA,SAc3B;AAAA;AAAA,MAAM,OAAO,CAACC,OAAOC,SAAR,EAAmBH,KAAnB,CAAb;AACGT,UAAMa,GAAN,CAAU,UAACC,KAAD,EAAyBC,KAAzB,EAA2C;AACpD,UAAMC,UAAUf,kBAAkBa,MAAMG,GAAxC;AACA,UAAMC,QAAQF,UAAUd,eAAV,GAA4BE,iBAA1C;AACA,UAAMe,kBAAkBH,UACpBb,qBADoB,GAEpBE,uBAFJ;AAGA,UAAMe,QAAQ,EAAEN,YAAF,EAASC,YAAT,EAAgBC,gBAAhB,EAAyBK,WAAWH,KAApC,EAAd;AACA,UAAMI,OAAOf,WAAWa,KAAX,CAAb;AACA,UAAMG,QAAQjB,SAASc,KAAT,CAAd;AACA,aACE;AAAA;AAAA;AACE,eAAKN,MAAMG,GADb;AAEE,mBAAS,mBAAM;AACbT,wBAAY,EAAEM,YAAF,EAASE,gBAAT,EAAZ;AACD,WAJH;AAKE,wBAAc;AALhB;AAOE;AAAA;AAAA,YAAM,OAAO,CAACL,OAAOa,IAAR,EAAc,EAAEL,gCAAF,EAAd,CAAb;AACGG,iBACC;AAAA;AAAA,cAAM,OAAO,CAACX,OAAOW,IAAR,EAAcN,UAAU,IAAV,GAAiBL,OAAOc,YAAtC,CAAb;AACGH;AADH,WADD,GAIG,IALN;AAMG,iBAAOC,KAAP,KAAiB,QAAjB,GACC;AAAA;AAAA,cAAM,OAAO,CAACZ,OAAOY,KAAR,EAAe,EAAEL,YAAF,EAAf,EAA0BR,UAA1B,CAAb;AAAqDa;AAArD,WADD,GAGCA;AATJ;AAPF,OADF;AAsBD,KA/BA;AADH,GAd2B;AAAA,CAA7B;;AAmDA3B,qBAAqB8B,YAArB,GAAoC;AAClCxB,mBAAiB,SADiB;AAElCC,yBAAuB,oBAFW;AAGlCC,qBAAmB,oBAHe;AAIlCC,2BAAyB;AAJS,CAApC;;AAOA,IAAMM,SAAS,wBAAWgB,MAAX,CAAkB;AAC/Bf,aAAW;AACTgB,eAAW,sBAASC,EAAT,KAAgB,KAAhB,GAAwB,EAAxB,GAA6B,CAD/B;AAETC,qBAAiB;AAFR,GADoB;AAK/BN,QAAM;AACJO,mBAAe,KADX;AAEJC,gBAAY;AAFR,GALyB;AAS/BV,QAAM;AACJW,sBAAkB,EADd;AAEJC,WAAO,EAFH;AAGJF,gBAAY;AAHR,GATyB;AAc/BP,gBAAc;AAKZU,aAAS;AALG,GAdiB;AAqB/BZ,SAAO;AACLa,YAAQ,EADH;AAELC,gBAAY;AAFP;AArBwB,CAAlB,CAAf;;kBA2BezC,oB","sourcesContent":["/* @flow */\n\nimport React from 'react';\nimport { View, Text, Platform, StyleSheet } from 'react-native';\n\nimport TouchableItem from '../TouchableItem';\n\nimport type {\n  NavigationScreenProp,\n  NavigationState,\n  NavigationAction,\n  NavigationRoute,\n  ViewStyleProp,\n  TextStyleProp,\n} from '../../TypeDefinition';\nimport type { DrawerScene, DrawerItem } from './DrawerView.js';\n\ntype Props = {\n  navigation: NavigationScreenProp<NavigationState, NavigationAction>,\n  items: Array<NavigationRoute>,\n  activeItemKey?: string,\n  activeTintColor?: string,\n  activeBackgroundColor?: string,\n  inactiveTintColor?: string,\n  inactiveBackgroundColor?: string,\n  getLabel: (scene: DrawerScene) => ?(React.Element<*> | string),\n  renderIcon: (scene: DrawerScene) => ?React.Element<*>,\n  onItemPress: (info: DrawerItem) => void,\n  style?: ViewStyleProp,\n  labelStyle?: TextStyleProp,\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  navigation: { state, navigate },\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  style,\n  labelStyle,\n}: Props) => (\n  <View style={[styles.container, style]}>\n    {items.map((route: NavigationRoute, index: number) => {\n      const focused = activeItemKey === route.key;\n      const color = focused ? activeTintColor : inactiveTintColor;\n      const backgroundColor = focused\n        ? activeBackgroundColor\n        : inactiveBackgroundColor;\n      const scene = { route, index, focused, tintColor: color };\n      const icon = renderIcon(scene);\n      const label = getLabel(scene);\n      return (\n        <TouchableItem\n          key={route.key}\n          onPress={() => {\n            onItemPress({ route, focused });\n          }}\n          delayPressIn={0}\n        >\n          <View style={[styles.item, { backgroundColor }]}>\n            {icon ? (\n              <View style={[styles.icon, focused ? null : styles.inactiveIcon]}>\n                {icon}\n              </View>\n            ) : null}\n            {typeof label === 'string' ? (\n              <Text style={[styles.label, { color }, labelStyle]}>{label}</Text>\n            ) : (\n              label\n            )}\n          </View>\n        </TouchableItem>\n      );\n    })}\n  </View>\n);\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: Platform.OS === 'ios' ? 20 : 0,\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n\nexport default DrawerNavigatorItems;\n"]}]
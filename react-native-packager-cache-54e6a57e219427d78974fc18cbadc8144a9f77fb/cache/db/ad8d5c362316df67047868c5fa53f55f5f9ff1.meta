["f3e70bf8553fccbafa9450a8a06171d3f2018bec","89cfccf1074bbb22145e749802769300452ca8d1",["../utils/invariant","./getScreenForRouteName","../addNavigationHelpers","./validateScreenOptions"],[91,219,375,530],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/routers/createConfigGetter.js"],"names":["applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","state","dispatch","route","routes","index","routeName","Component","outputConfig","router","JSON","stringify","childRoute","childNavigation","getScreenOptions","routeConfig","routeScreenConfig","componentScreenConfig","configOptions"],"mappings":";;;;AAIA;;;;AAEA;;;;AACA;;;;AACA;;;;AAYA,SAASA,WAAT,CACEC,UADF,EAEEC,iBAFF,EAGEC,WAHF,EAIK;AACH,MAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpC,oCACKC,iBADL,EAEKD,oCACEE,WADF;AAEDD;AAFC,OAFL;AAOD;AACD,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,oCACKC,iBADL,EAEKD,UAFL;AAID;AACD,SAAOC,iBAAP;AACD;;kBAEc,UACbE,YADa,EAEbC,qBAFa;AAAA,SAGV,UACHC,UADG,EAEHC,WAFG,EAGA;AAAA,QACKC,KADL,GACyBF,UADzB,CACKE,KADL;AAAA,QACYC,QADZ,GACyBH,UADzB,CACYG,QADZ;;AAEH,QAAMC,QAAQF,KAAd;AAFG,eAIwBE,KAJxB;AAAA,QAIKC,MAJL,QAIKA,MAJL;AAAA,QAIaC,KAJb,QAIaA,KAJb;;;AAMH,6BACEF,MAAMG,SAAN,IAAmB,OAAOH,MAAMG,SAAb,KAA2B,QADhD,EAEE,gEAFF;;AAKA,QAAMC,YAAY,qCAAsBV,YAAtB,EAAoCM,MAAMG,SAA1C,CAAlB;;AAEA,QAAIE,eAAe,EAAnB;;AAEA,QAAID,UAAUE,MAAd,EAAsB;AACpB,+BACEN,SAASC,MAAT,IAAmBC,SAAS,IAD9B,kDAEgDK,KAAKC,SAAL,CAAeR,KAAf,CAFhD;AAIA,UAAMS,aAAaR,OAAOC,KAAP,CAAnB;AACA,UAAMQ,kBAAkB,oCAAqB;AAC3CZ,eAAOW,UADoC;AAE3CV;AAF2C,OAArB,CAAxB;AAIAM,qBAAeD,UAAUE,MAAV,CAAiBK,gBAAjB,CACbD,eADa,EAEbb,WAFa,CAAf;AAID;;AAED,QAAMe,cAAclB,aAAaM,MAAMG,SAAnB,CAApB;;AAEA,QAAMU,oBAAoBD,YAAYpB,iBAAtC;AACA,QAAMsB,wBAAwBV,UAAUZ,iBAAxC;;AAEA,QAAMuB,gBAAgB,EAAEnB,sBAAF,EAAcC,aAAaA,eAAe,EAA1C,EAAtB;;AAEAQ,mBAAef,YACbK,qBADa,EAEbU,YAFa,EAGbU,aAHa,CAAf;AAKAV,mBAAef,YACbwB,qBADa,EAEbT,YAFa,EAGbU,aAHa,CAAf;AAKAV,mBAAef,YAAYuB,iBAAZ,EAA+BR,YAA/B,EAA6CU,aAA7C,CAAf;;AAEA,yCAAsBV,YAAtB,EAAoCL,KAApC;;AAEA,WAAOK,YAAP;AACD,GA3Dc;AAAA,C","sourcesContent":["/*\n * @flow\n */\n\nimport invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport addNavigationHelpers from '../addNavigationHelpers';\nimport validateScreenOptions from './validateScreenOptions';\n\nimport type {\n  NavigationScreenProp,\n  NavigationAction,\n  NavigationRoute,\n  NavigationStateRoute,\n  NavigationRouteConfigMap,\n  NavigationScreenConfig,\n  NavigationScreenConfigProps,\n} from '../TypeDefinition';\n\nfunction applyConfig<T: {}>(\n  configurer: ?NavigationScreenConfig<T>,\n  navigationOptions: any,\n  configProps: NavigationScreenConfigProps\n): * {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (\n  routeConfigs: NavigationRouteConfigMap,\n  navigatorScreenConfig?: NavigationScreenConfig<*>\n) => (\n  navigation: NavigationScreenProp<NavigationRoute, NavigationAction>,\n  screenProps: *\n) => {\n  const { state, dispatch } = navigation;\n  const route = state;\n  // $FlowFixMe\n  const { routes, index } = (route: NavigationStateRoute);\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  let outputConfig = {};\n\n  if (Component.router) {\n    invariant(\n      route && routes && index != null,\n      `Expect nav state to have routes and index, ${JSON.stringify(route)}`\n    );\n    const childRoute = routes[index];\n    const childNavigation = addNavigationHelpers({\n      state: childRoute,\n      dispatch,\n    });\n    outputConfig = Component.router.getScreenOptions(\n      childNavigation,\n      screenProps\n    );\n  }\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig = routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  outputConfig = applyConfig(\n    navigatorScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]}]
["43e7c9e63875ae93e2339823399696d67d5d81d5","7c67aba0adbfff9f580b71cfe4f80bcf66cb7992",["react","react-native"],[87,184],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/views/TouchableItem.js"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","OS","Version","props","style","rest","Ripple","pressColor","borderless","only","children","defaultProps"],"mappings":";;;;AAWA;;;;AACA;;AAQA,IAAMA,2BAA2B,EAAjC;;IAgBqBC,a;;;;;;;;;;6BAUV;AASP,UACE,sBAASC,EAAT,KAAgB,SAAhB,IACA,sBAASC,OAAT,IAAoBH,wBAFtB,EAGE;AAAA,qBAC2B,KAAKI,KADhC;AAAA,YACQC,MADR,UACQA,KADR;AAAA,YACkBC,IADlB;;AAEA,eACE;AAAA;AAAA,mCACMA,IADN;AAEE,mBAAO,IAFT;AAGE,wBAAY,qCAAwBC,MAAxB,CACV,KAAKH,KAAL,CAAWI,UAAX,IAAyB,EADf,EAEV,KAAKJ,KAAL,CAAWK,UAAX,IAAyB,KAFf;AAHd;AAQE;AAAA;AAAA,cAAM,OAAO,KAAKL,KAAL,CAAWC,KAAxB;AACG,4BAASK,IAAT,CAAc,KAAKN,KAAL,CAAWO,QAAzB;AADH;AARF,SADF;AAcD;;AAED,aACE;AAAA;AAAsB,aAAKP,KAA3B;AAAmC,aAAKA,KAAL,CAAWO;AAA9C,OADF;AAGD;;;;;AA3CkBV,a,CAKZW,Y,GAAe;AACpBH,cAAY,KADQ;AAEpBD,cAAY;AAFQ,C;kBALHP,a","sourcesContent":["/* @flow */\n\n/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport React, { Component, Children } from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport type { ViewStyleProp } from '../TypeDefinition';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\ntype Props = {\n  onPress: () => void,\n  delayPressIn?: number,\n  borderless?: boolean,\n  pressColor?: string,\n  activeOpacity?: number,\n  children?: React.Element<*>,\n  style?: ViewStyleProp,\n};\n\ntype DefaultProps = {\n  pressColor: string,\n};\n\nexport default class TouchableItem extends Component<\n  DefaultProps,\n  Props,\n  void\n> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, ...rest } = this.props; // eslint-disable-line no-unused-vars\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          style={null}\n          background={TouchableNativeFeedback.Ripple(\n            this.props.pressColor || '',\n            this.props.borderless || false\n          )}\n        >\n          <View style={this.props.style}>\n            {Children.only(this.props.children)}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableOpacity {...this.props}>{this.props.children}</TouchableOpacity>\n    );\n  }\n}\n"]}]
["1596d150522cf922e4bfe62b5094b217098d767b","f8cd73f71b7885689b606f813752d2d4654b956d",["react","./utils/invariant","./PlatformHelpers","./NavigationActions","./addNavigationHelpers"],[132,227,348,404,548],{"version":3,"sources":["/home/dhamaddam/AndroidStudioProjects/go-dongeng/node_modules/react-navigation/src/createNavigationContainer.js"],"names":["createNavigationContainer","Component","NavigationContainer","props","subs","_handleOpenURL","url","parsedUrl","_urlToPathAndParams","path","params","action","router","getActionForPathAndParams","dispatch","state","_isStateful","nav","getStateForAction","setState","_onNavigationStateChange","_validateProps","init","navigation","screenProps","containerProps","keys","Object","length","join","delimiter","uriPrefix","split","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","console","group","log","groupEnd","newState","lastState","nextProps","addEventListener","back","getInitialURL","then","removeEventListener","remove","_navigation"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React from 'react';\nimport invariant from './utils/invariant';\nimport { BackHandler, Linking } from './PlatformHelpers';\nimport NavigationActions from './NavigationActions';\nimport addNavigationHelpers from './addNavigationHelpers';\n\nimport type {\n  NavigationRoute,\n  NavigationAction,\n  NavigationState,\n  NavigationScreenProp,\n  NavigationNavigatorProps,\n  NavigationNavigator,\n} from './TypeDefinition';\n\ntype NavigationContainerProps = {\n  uriPrefix?: string | RegExp,\n  onNavigationStateChange?: (\n    NavigationState,\n    NavigationState,\n    NavigationAction\n  ) => void,\n};\n\ntype Props<O, S> = NavigationContainerProps & NavigationNavigatorProps<O, S>;\n\ntype State = {\n  nav: ?NavigationState,\n};\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer<S: *, O>(\n  Component: NavigationNavigator<*, S, *, O>\n) {\n  class NavigationContainer extends React.Component<void, Props<O, S>, State> {\n    state: State;\n    props: Props<O, S>;\n\n    subs: ?{\n      remove: () => void,\n    } = null;\n\n    static router = Component.router;\n\n    constructor(props: Props<O, S>) {\n      super(props);\n\n      this._validateProps(props);\n\n      this.state = {\n        nav: this._isStateful()\n          ? Component.router.getStateForAction(NavigationActions.init())\n          : null,\n      };\n    }\n\n    _isStateful(): boolean {\n      return !this.props.navigation;\n    }\n\n    _validateProps(props: Props<O, S>) {\n      if (this._isStateful()) {\n        return;\n      }\n\n      const { navigation, screenProps, ...containerProps } = props;\n\n      const keys = Object.keys(containerProps);\n\n      invariant(\n        keys.length === 0,\n        'This navigator has both navigation and container props, so it is ' +\n          `unclear if it should own its own state. Remove props: \"${keys.join(\n            ', '\n          )}\" ` +\n          'if the navigator should get its state from the navigation prop. If the ' +\n          'navigator should maintain its own state, do not pass a navigation prop.'\n      );\n    }\n\n    _urlToPathAndParams(url: string) {\n      const params = {};\n      const delimiter = this.props.uriPrefix || '://';\n      let path = url.split(delimiter)[1];\n      if (typeof path === 'undefined') {\n        path = url;\n      }\n      return {\n        path,\n        params,\n      };\n    }\n\n    _handleOpenURL = ({ url }: { url: string }) => {\n      const parsedUrl = this._urlToPathAndParams(url);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(\n      prevNav: NavigationState,\n      nav: NavigationState,\n      action: NavigationAction\n    ) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        /* eslint-disable no-console */\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        /* eslint-enable no-console */\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentWillReceiveProps(nextProps: *) {\n      this._validateProps(nextProps);\n    }\n\n    componentDidMount() {\n      if (!this._isStateful()) {\n        return;\n      }\n\n      this.subs = BackHandler.addEventListener('hardwareBackPress', () =>\n        this.dispatch(NavigationActions.back())\n      );\n\n      Linking.addEventListener('url', this._handleOpenURL);\n\n      Linking.getInitialURL().then(\n        (url: ?string) => url && this._handleOpenURL({ url })\n      );\n    }\n\n    componentWillUnmount() {\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n    }\n\n    dispatch = (action: NavigationAction) => {\n      const { state } = this;\n      if (!this._isStateful()) {\n        return false;\n      }\n      const nav = Component.router.getStateForAction(action, state.nav);\n      if (nav && nav !== state.nav) {\n        this.setState({ nav }, () =>\n          this._onNavigationStateChange(state.nav, nav, action)\n        );\n        return true;\n      }\n      return false;\n    };\n\n    _navigation: ?NavigationScreenProp<NavigationRoute, NavigationAction>;\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        if (!this._navigation || this._navigation.state !== this.state.nav) {\n          this._navigation = addNavigationHelpers({\n            dispatch: this.dispatch,\n            state: this.state.nav,\n          });\n        }\n        navigation = this._navigation;\n      }\n      return <Component {...this.props} navigation={navigation} />;\n    }\n  }\n\n  return NavigationContainer;\n}\n"]}]